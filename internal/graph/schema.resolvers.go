package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"/GO-server/internal/graph/models"
	"/GO-server/internal/graph/schema"
	models1 "/GO-server/internal/models"
	pb "/GO-server/proto/auth"
	"context"
	"fmt"
)

// Mutation Resolvers
func (r *mutationResolver) Register(ctx context.Context, input models.RegisterInput) (*models.AuthResponse, error) {
	req := &pb.RegisterRequest{
		Name:     input.Name,
		Email:    input.Email,
		Password: input.Password,
	}

	resp, err := r.AuthService.Register(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("registration failed: %w", err)
	}

	return &AuthResponse{
		Message: resp.Message,
		Token:   resp.Token,
		User:    convertPbUserToGraphQL(resp.User),
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input models.LoginInput) (*models.AuthResponse, error) {
	req := &pb.LoginRequest{
		Email:    input.Email,
		Password: input.Password,
	}

	resp, err := r.AuthService.Login(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("login failed: %w", err)
	}

	return &AuthResponse{
		Message: resp.Message,
		Token:   resp.Token,
		User:    convertPbUserToGraphQL(resp.User),
	}, nil
}

// VerifyEmail is the resolver for the verifyEmail field.
func (r *mutationResolver) VerifyEmail(ctx context.Context, token string) (*models.AuthResponse, error) {
	req := &pb.VerifyEmailRequest{
		Token: token,
	}

	resp, err := r.AuthService.VerifyEmail(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("email verification failed: %w", err)
	}

	return &AuthResponse{
		Message: resp.Message,
		Token:   resp.Token,
		User:    convertPbUserToGraphQL(resp.User),
	}, nil
}

// Query Resolvers
func (r *queryResolver) Me(ctx context.Context) (*models1.User, error) {
	userID := ctx.Value("userID")
	if userID == nil {
		return nil, fmt.Errorf("not authenticated")
	}

	user, err := r.AuthService.GetUserByID(ctx, userID.(string))
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	return convertPbUserToGraphQL(user), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models1.User, error) {
	isAdmin := ctx.Value("isAdmin")
	if isAdmin == nil || !isAdmin.(bool) {
		return nil, fmt.Errorf("unauthorized: admin access required")
	}

	users, err := r.AuthService.GetUsers(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get users: %w", err)
	}

	var result []*User
	for _, u := range users {
		result = append(result, convertPbUserToGraphQL(u))
	}

	return result, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models1.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Cart is the resolver for the cart field.
func (r *userResolver) Cart(ctx context.Context, obj *models1.User) ([]string, error) {
	panic(fmt.Errorf("not implemented: Cart - cart"))
}

// Addresses is the resolver for the addresses field.
func (r *userResolver) Addresses(ctx context.Context, obj *models1.User) ([]string, error) {
	panic(fmt.Errorf("not implemented: Addresses - addresses"))
}

// Mutation returns schema.MutationResolver implementation.
func (r *Resolver) Mutation() schema.MutationResolver { return &mutationResolver{r} }

// Query returns schema.QueryResolver implementation.
func (r *Resolver) Query() schema.QueryResolver { return &queryResolver{r} }

// User returns schema.UserResolver implementation.
func (r *Resolver) User() schema.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
